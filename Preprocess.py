import json
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler, MinMaxScaler

# JSON Report generated by EDA
def load_eda_report(json_file):
    with open(json_file, 'r') as f:
        return json.load(f)

# Preprocessing transformations 
def preprocess_timeseries(df, report):
    for entry in report["preprocessing_recommendations"]["feature_engineering"]:
        column = entry["column"]

        # Apply Stationarity transformations
        transformations = entry["suggested_transformations"]
        
        if "differencing" in transformations:
            df[column] = df[column].diff().fillna(df[column].iloc[0])
        elif "log_transformation" in transformations:
            df[column] = np.log1p(df[column])
        elif "rolling_mean_normalization" in transformations:
            df[column] = df[column] - df[column].rolling(window=3, min_periods=1).mean()
        
        # Apply Seasonality transformations
        if "seasonal_differencing" in entry["suggested_transformations"]:
            df[column] = df[column].diff(periods=12).fillna(df[column].iloc[0])

    # scaling recommandation
    for entry in report["preprocessing_recommendations"]["feature_scaling"]:
        column = entry["column"]
        methods = entry["recommended_method"]
        
        if "standardization" in methods:
            scaler = StandardScaler()
            df[column] = scaler.fit_transform(df[[column]])
        elif "min_max_scaling" in methods:
            scaler = MinMaxScaler()
            df[column] = scaler.fit_transform(df[[column]])
    
    return df

# 
if __name__ == "__main__":
    eda_report = load_eda_report("mlops_eda_report.json")
    
    # dataset (example)
    df = pd.read_csv("./datasets/Month_Value_1.csv", index_col="Period", parse_dates=True)
    
    # preprocessing
    df_processed = preprocess_timeseries(df, eda_report)
    
    # Sauvegarder le dataset preprocess√©
    df_processed.to_csv("preprocessed_timeseries.csv")
    print("Preprocessing finished. Data saved'.")
